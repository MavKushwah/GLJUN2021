Description: Stack to create all lambda functions


Parameters:
  Namespace:
    Type: String
    Description: Namespace for resources
  Bucket:
    Type: String
    Description: Containing source files

Resources:
  RegisterLambda:
      Type: AWS::Lambda::Function
      Properties:
        FunctionName: !Sub "${Namespace}-Register-Function"
        Runtime: python3.9
        Handler: 'index.handler'
        MemorySize: 128
        Timeout: 10
        Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/${Namespace}-Register-Lambda-Role"
        Code:
          ZipFile: |
            def handler(event, context):
              print('I am called')
              return {
                'statusCode': '200',
                'body': 'hello world',
                'headers': {},
              }

  LoginLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${Namespace}-Login-Function"
      Runtime: python3.9
      Handler: 'index.handler'
      MemorySize: 128
      Timeout: 10
      Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/${Namespace}-Login-Lambda-Role"
      Code:
        ZipFile: |
          def handler(event, context):
            print('I am called')
            return {
              'statusCode': '200',
              'body': 'hello world',
              'headers': {},
            }

  LogoffLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${Namespace}-Logoff-Function"
      Runtime: python3.9
      Handler: 'index.handler'
      MemorySize: 128
      Timeout: 10
      Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/${Namespace}-Logoff-Lambda-Role"
      Code:
        ZipFile: |
          def handler(event, context):
            print('I am called')
            return {
              'statusCode': '200',
              'body': 'hello world',
              'headers': {},
            }

  FindTaxiLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${Namespace}-FindTaxi-Function"
      Runtime: python3.9
      Handler: 'index.handler'
      MemorySize: 128
      Timeout: 10
      Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/${Namespace}-FindTaxi-Lambda-Role"
      Code:
        ZipFile: |
          def handler(event, context):
            print('I am called')
            return {
              'statusCode': '200',
              'body': 'hello world',
              'headers': {},
            }

  CleanupLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${Namespace}-Cleanup-Function"
      Runtime: python3.9
      Handler: 'index.handler'
      MemorySize: 128
      Timeout: 10
      Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/${Namespace}-Cleanup-Lambda-Role"
      Code:
        ZipFile: |
          def handler(event, context):
            print('I am called')
            return {
              'statusCode': '200',
              'body': 'hello world',
              'headers': {},
            }

Outputs:

  LoginLambdaArn:
    Value: !GetAtt LoginLambda.Arn
  LogoffLambdaArn:
    Value: !GetAtt LogoffLambda.Arn
  RegisterLambdaArn:
    Value: !GetAtt RegisterLambda.Arn
  FindTaxiLambdaArn:
    Value: !GetAtt FindTaxiLambda.Arn
  CleanupLambdaArn:
    Value: !GetAtt CleanupLambda.Arn
