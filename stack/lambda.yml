AWSTemplateFormatVersion: "2010-09-09"
Description: Stack to create all lambda functions

Parameters:
  Namespace:
    Type: String
    Description: Namespace for resources
  Bucket:
    Type: String
    Description: Containing source files
  BuildStamp:
      Type: String
      Description: String to be used to create artifacts
  SubnetId:
    Type: String
  SecurityGroup:
    Type: String
  MongoUri:
    Type: String
  MqttPrivateIp:
    Type: String
  MqttPublicIp:
    Type: String
  CommonLambdaRoleArn:
    Type: String

Resources:

  LambdaLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      CompatibleArchitectures:
        - 'x86_64'
      CompatibleRuntimes:
        - python3.7
        - python3.8
      Content:
        S3Bucket: !Ref Bucket
        S3Key: !Sub "build/${Namespace}-${BuildStamp}-layer.zip"
      LayerName: !Sub "${Namespace}-${BuildStamp}-Layer"
      LicenseInfo: MIT

  RegisterLambda:
      Type: AWS::Lambda::Function
      Properties:
        FunctionName: !Sub "${Namespace}-Register-Function"
        Runtime: python3.7
        Handler: 'functions.register.handler'
        MemorySize: 128
        Timeout: 10
        Role: !Ref CommonLambdaRoleArn
        Layers:
          - !Ref LambdaLayer
        Code:
          S3Bucket: !Ref Bucket
          S3Key: !Sub "build/${Namespace}/${BuildStamp}/lambda.zip"
        VpcConfig:
          SecurityGroupIds:
            - !Ref SecurityGroup
          SubnetIds:
            - !Ref SubnetId
        Environment:
          Variables:
            NAMESPACE: !Ref Namespace
            MONGO_URI: !Ref MongoUri
            MQTT_PUBLIC_IP: !Ref MqttPublicIp
            MQTT_PRIVATE_IP: !Ref MqttPrivateIp

  LoginLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${Namespace}-Login-Function"
      Runtime: python3.7
      Handler: 'functions.login.handler'
      MemorySize: 128
      Timeout: 10
      Role: !Ref CommonLambdaRoleArn
      Code:
        S3Bucket: !Ref Bucket
        S3Key: !Sub "build/${Namespace}/${BuildStamp}/lambda.zip"
      Layers:
        - !Ref LambdaLayer
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroup
        SubnetIds:
          - !Ref SubnetId
      Environment:
        Variables:
          NAMESPACE: !Ref Namespace
          MONGO_URI: !Ref MongoUri
          MQTT_PUBLIC_IP: !Ref MqttPublicIp
          MQTT_PRIVATE_IP: !Ref MqttPrivateIp

  LogoffLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${Namespace}-Logoff-Function"
      Runtime: python3.7
      Handler: 'functions.logoff.handler'
      MemorySize: 128
      Timeout: 10
      Role: !Ref CommonLambdaRoleArn
      Code:
        S3Bucket: !Ref Bucket
        S3Key: !Sub "build/${Namespace}/${BuildStamp}/lambda.zip"
      Layers:
        - !Ref LambdaLayer
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroup
        SubnetIds:
          - !Ref SubnetId
      Environment:
        Variables:
          NAMESPACE: !Ref Namespace
          MONGO_URI: !Ref MongoUri
          MQTT_PUBLIC_IP: !Ref MqttPublicIp
          MQTT_PRIVATE_IP: !Ref MqttPrivateIp

  CreateRideLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${Namespace}-CreateRide-Function"
      Runtime: python3.7
      Layers:
        - !Ref LambdaLayer
      Handler: 'functions.createride.handler'
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroup
        SubnetIds:
          - !Ref SubnetId
      MemorySize: 128
      Timeout: 10
      Role: !Ref CommonLambdaRoleArn
      Code:
        S3Bucket: !Ref Bucket
        S3Key: !Sub "build/${Namespace}/${BuildStamp}/lambda.zip"
      Environment:
        Variables:
          NAMESPACE: !Ref Namespace
          MONGO_URI: !Ref MongoUri
          MQTT_PUBLIC_IP: !Ref MqttPublicIp
          MQTT_PRIVATE_IP: !Ref MqttPrivateIp

  FindTaxiLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${Namespace}-FindTaxi-Function"
      Runtime: python3.7
      Layers:
        - !Ref LambdaLayer
      Handler: 'functions.find_taxi.handler'
      MemorySize: 128
      Timeout: 30
      Role: !Ref CommonLambdaRoleArn
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroup
        SubnetIds:
          - !Ref SubnetId
      Code:
        S3Bucket: !Ref Bucket
        S3Key: !Sub "build/${Namespace}/${BuildStamp}/lambda.zip"
      Environment:
        Variables:
          NAMESPACE: !Ref Namespace
          MONGO_URI: !Ref MongoUri
          MQTT_PUBLIC_IP: !Ref MqttPublicIp
          MQTT_PRIVATE_IP: !Ref MqttPrivateIp

  AcceptRideLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${Namespace}-AcceptRide-Function"
      Runtime: python3.7
      Handler: 'functions.accept.handler'
      MemorySize: 128
      Timeout: 10
      Role: !Ref CommonLambdaRoleArn
      Layers:
        - !Ref LambdaLayer
      Code:
        S3Bucket: !Ref Bucket
        S3Key: !Sub "build/${Namespace}/${BuildStamp}/lambda.zip"
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroup
        SubnetIds:
          - !Ref SubnetId
      Environment:
        Variables:
          NAMESPACE: !Ref Namespace
          MONGO_URI: !Ref MongoUri
          MQTT_PUBLIC_IP: !Ref MqttPublicIp
          MQTT_PRIVATE_IP: !Ref MqttPrivateIp

  RideUpdateLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${Namespace}-RideUpdate-Function"
      Runtime: python3.7
      Handler: 'functions.ride.handler'
      MemorySize: 128
      Timeout: 10
      Role: !Ref CommonLambdaRoleArn
      Layers:
        - !Ref LambdaLayer
      Code:
        S3Bucket: !Ref Bucket
        S3Key: !Sub "build/${Namespace}/${BuildStamp}/lambda.zip"
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroup
        SubnetIds:
          - !Ref SubnetId
      Environment:
        Variables:
          NAMESPACE: !Ref Namespace
          MONGO_URI: !Ref MongoUri
          MQTT_PUBLIC_IP: !Ref MqttPublicIp
          MQTT_PRIVATE_IP: !Ref MqttPrivateIp

  CleanupLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${Namespace}-Cleanup-Function"
      Runtime: python3.7
      Layers:
        - !Ref LambdaLayer
      Handler: 'functions.cleanup.handler'
      MemorySize: 128
      Timeout: 10
      Role: !Ref CommonLambdaRoleArn
      Code:
        S3Bucket: !Ref Bucket
        S3Key: !Sub "build/${Namespace}/${BuildStamp}/lambda.zip"
      Environment:
        Variables:
          NAMESPACE: !Ref Namespace
          MONGO_URI: !Ref MongoUri
          MQTT_PUBLIC_IP: !Ref MqttPublicIp
          MQTT_PRIVATE_IP: !Ref MqttPrivateIp

  LocationLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${Namespace}-Location-Function"
      Runtime: python3.7
      Handler: 'functions.location.handler'
      MemorySize: 128
      Timeout: 10
      Role: !Ref CommonLambdaRoleArn
      Code:
        S3Bucket: !Ref Bucket
        S3Key: !Sub "build/${Namespace}/${BuildStamp}/lambda.zip"
      Layers:
        - !Ref LambdaLayer
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroup
        SubnetIds:
          - !Ref SubnetId
      Environment:
        Variables:
          NAMESPACE: !Ref Namespace
          MONGO_URI: !Ref MongoUri
          MQTT_PUBLIC_IP: !Ref MqttPublicIp
          MQTT_PRIVATE_IP: !Ref MqttPrivateIp

  GetAllTaxisLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${Namespace}-FindAllTaxis-Function"
      Runtime: python3.7
      Layers:
        - !Ref LambdaLayer
      Handler: 'functions.find_all_taxi.handler'
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroup
        SubnetIds:
          - !Ref SubnetId
      MemorySize: 128
      Timeout: 10
      Role: !Ref CommonLambdaRoleArn
      Code:
        S3Bucket: !Ref Bucket
        S3Key: !Sub "build/${Namespace}/${BuildStamp}/lambda.zip"
      Environment:
        Variables:
          NAMESPACE: !Ref Namespace
          MONGO_URI: !Ref MongoUri

Outputs:

  LoginLambdaArn:
    Value: !GetAtt LoginLambda.Arn
  LogoffLambdaArn:
    Value: !GetAtt LogoffLambda.Arn
  RegisterLambdaArn:
    Value: !GetAtt RegisterLambda.Arn
  CreateRideLambdaArn:
    Value: !GetAtt CreateRideLambda.Arn
  FindTaxiLambdaArn:
    Value: !GetAtt FindTaxiLambda.Arn
  AcceptRideLambdaArn:
    Value: !GetAtt AcceptRideLambda.Arn
  RideUpdateLambdaArn:
    Value: !GetAtt RideUpdateLambda.Arn
  CleanupLambdaArn:
    Value: !GetAtt CleanupLambda.Arn
  LocationLambdaArn:
    Value: !GetAtt LocationLambda.Arn
  GetAllTaxisLambdaArn:
    Value: !GetAtt GetAllTaxisLambda.Arn

